{"version":3,"sources":["store/reducer.js","store/types.js","store/index.js","store/selectors.js","components/DownloadLink/index.js","components/Field/Record/index.js","store/actions.js","components/Field/index.js","components/FieldList/index.js","components/App/index.js","index.js"],"names":["buildTypeField","type","props","baseField","id","replace","c","r","Math","random","toString","parentId","name","nullable","undefined","recordName","default","changeField","state","fieldId","fieldName","value","previousValue","newValue","addField","newField","changeType","tempState","removeFieldChildren","Object","values","filter","field","forEach","reducer","action","payload","defaultValue","changeDefaultValue","changeName","changeNullable","newState","removeField","initialState","rootElement","StoreContext","createContext","useStore","useContext","getFields","store","convertForParent","map","convertedField","fields","JSON","parse","convertField","FieldList","avro","storeToAvro","serializedAvro","stringify","url","encodeURIComponent","download","href","RecordType","dispatch","DefaultField","Fragment","onChange","evt","target","supportedTypes","Field","TypeComponent","RecordField","className","onClick","st","key","checked","App","DownloadLink","ReactDOM","render","children","contextValue","useReducer","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.7489479b.chunk.js","sourcesContent":["import {\n  ADD_FIELD,\n  CHANGE_DEFAULT_VALUE,\n  CHANGE_NAME,\n  CHANGE_NULLABLE,\n  CHANGE_TYPE,\n  REMOVE_FIELD,\n} from './types'\n\nconst uuidv4 = () => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\nconst buildTypeField = (type, props) => {\n  const baseField = {\n    id: props.id || uuidv4(),\n    parentId: props.parentId || null,\n    type: type,\n    name: props.name || 'name',\n    nullable: props.nullable === undefined ? true : props.nullable\n  }\n\n  switch (type) {\n    case 'record': return { ...baseField, recordName: baseField.name, default: '{}' }\n    default: return baseField\n  }\n}\n\nconst removeFieldChildren = (state, fieldId) => {\n  let tempState = { ...state }\n  const children = Object.values(state).filter(field => field.parentId === fieldId)\n  children.forEach(field => {\n    delete tempState[field.id]\n    if (field.type === 'record') {\n      tempState = removeFieldChildren(tempState, field.id)\n    }\n  })\n  delete tempState[fieldId]\n  return tempState\n}\n\nconst changeField = (state, fieldId, fieldName, value) => {\n  const previousValue = state[fieldId]\n  const newValue = { ...previousValue, [fieldName]: value }\n  return {\n    ...state,\n    [fieldId]: newValue\n  }\n}\n\nconst addField = (state, props) => {\n  const newField = buildTypeField(props.type, props)\n  return {\n    ...state,\n    [newField.id]: newField\n  }\n}\n\nconst changeDefaultValue = (state, { fieldId, defaultValue }) => {\n  return changeField(state, fieldId, 'default', defaultValue)\n}\n\nconst changeName = (state, { fieldId, name }) => {\n  return changeField(state, fieldId, 'name', name)\n}\n\nconst changeNullable = (state, { fieldId }) => {\n  return changeField(state, fieldId, 'nullable', !state[fieldId].nullable)\n}\n\nconst changeType = (state, { fieldId, type }) => {\n  const previousValue = state[fieldId]\n  const newValue = buildTypeField(type, previousValue)\n  let tempState = state\n  if (previousValue.type === 'record' && newValue.type !== 'record') {\n    tempState = removeFieldChildren(state, fieldId)\n  }\n  return {\n    ...tempState,\n    [fieldId]: newValue\n  }\n}\n\nconst removeField = (state, { fieldId }) => {\n  const newState = { ...state }\n  delete newState[fieldId]\n  return newState\n}\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case ADD_FIELD: return addField(state, action.payload)\n    case CHANGE_DEFAULT_VALUE: return changeDefaultValue(state, action.payload)\n    case CHANGE_NAME: return changeName(state, action.payload)\n    case CHANGE_NULLABLE: return changeNullable(state, action.payload)\n    case CHANGE_TYPE: return changeType(state, action.payload)\n    case REMOVE_FIELD: return removeField(state, action.payload)\n    default: return state\n  }\n}\n\n// Starting value\nlet initialState = {}\nlet rootElement = buildTypeField('record', { name: 'event_name' })\ninitialState = addField(initialState, rootElement)\ninitialState = addField(initialState, { parentId: rootElement.id, name: 'event_name', type: 'string', nullable: false })\ninitialState = addField(initialState, { parentId: rootElement.id, name: \"trace_id\", type: \"string\", nullable: false })\ninitialState = addField(initialState, { parentId: rootElement.id, name: \"timestamp\", type: \"string\", nullable: false })\ninitialState = addField(initialState, { parentId: rootElement.id, name: \"organization_id\", type: \"string\", nullable: false })\nlet payload = buildTypeField('record', { parentId: rootElement.id, name: \"payload\", default: \"{}\", type: \"record\", recordName: \"payload\", nullable: false })\ninitialState = addField(initialState, payload)\ninitialState = addField(initialState, { parentId: payload.id, name: \"body\", type: \"string\" })\n\nexport { initialState }\n","export const ADD_FIELD = 'add_field'\nexport const CHANGE_DEFAULT_VALUE = 'change_default_value'\nexport const CHANGE_NAME = 'change_name'\nexport const CHANGE_NULLABLE = 'change_nullable'\nexport const CHANGE_TYPE = 'change_type'\nexport const REMOVE_FIELD = 'remove_field'\n","import React, { createContext, useContext, useReducer } from 'react'\n\nimport { initialState, reducer } from './reducer'\n\nconst StoreContext = createContext();\n\nexport const StoreProvider = ({ children }) => {\n  const contextValue = useReducer(reducer, initialState);\n  return (\n    <StoreContext.Provider value={contextValue}>\n      {children}\n    </StoreContext.Provider>\n  );\n};\n\nexport const useStore = () => {\n  const contextValue = useContext(StoreContext);\n  return contextValue;\n};\n","export const getFields = (store, parentId = null) => {\n  return Object.values(store).filter(field => field.parentId === parentId)\n}\n","import React from 'react';\n\nimport { useStore } from 'store'\nimport { getFields } from 'store/selectors'\n\nconst convertField = (store, field) => {\n  const convertedField = { ...field }\n  const parentId = convertedField.parentId\n\n  switch (convertedField.type) {\n    case 'record':\n      convertedField.fields = convertForParent(store, convertedField.id)\n      if (!parentId) {\n        delete convertedField.default\n        delete convertedField.recordName\n        break\n      }\n      convertedField.default = JSON.parse(convertedField.default)\n      convertedField.type = {\n        type: 'record',\n        name: convertedField.recordName,\n        fields: convertedField.fields\n      }\n      delete convertedField.recordName\n      delete convertedField.fields\n      break\n    default:\n      break\n  }\n\n  const nullable = convertedField.nullable\n  if (nullable && parentId) {\n    convertedField.type = [\"null\", convertedField.type]\n    convertedField.default = null\n  }\n\n  delete convertedField.id\n  delete convertedField.parentId\n  delete convertedField.nullable\n\n  return convertedField\n}\n\nconst convertForParent = (store, parentId) => {\n  const children = getFields(store, parentId)\n  return children.map(field => convertField(store, field))\n}\n\nconst storeToAvro = (store) => convertForParent(store)[0]\n\nconst FieldList = ({ parentId }) => {\n  const [store] = useStore()\n  const avro = storeToAvro(store)\n  const serializedAvro = JSON.stringify(avro, undefined, 2)\n  const prefix = \"data:text/plain;charset=utf-8,\"\n  const url = prefix + encodeURIComponent(serializedAvro)\n\n  return (\n    <a download={\"schema.avsc\"} href={url}>Export</a>\n  )\n}\n\nexport default FieldList\n","import React from 'react'\n\nimport FieldList from 'components/FieldList'\nimport { useStore } from 'store'\nimport { changeDefaultValue } from 'store/actions'\n\nconst RecordType = ({ id, parentId, nullable, default: defaultValue }) => {\n  const [, dispatch] = useStore()\n  const DefaultField = <React.Fragment>, \"default\": <input type=\"text\" value={defaultValue} onChange={(evt) => changeDefaultValue(dispatch, id, evt.target.value)} /></React.Fragment>\n\n  return (\n    <React.Fragment>\n      {parentId && !nullable ? DefaultField : null}\n      , \"fields\": [\n        <FieldList parentId={id} />\n      ]\n    </React.Fragment>\n  )\n}\n\nexport default RecordType;\n","import {\n  ADD_FIELD,\n  CHANGE_DEFAULT_VALUE,\n  CHANGE_NAME,\n  CHANGE_NULLABLE,\n  CHANGE_TYPE,\n  REMOVE_FIELD,\n} from './types'\n\nexport const addField = (dispatch, parentId, type = 'string') => dispatch({\n  type: ADD_FIELD,\n  payload: {\n    parentId,\n    type\n  }\n})\n\nexport const changeDefaultValue = (dispatch, fieldId, defaultValue) => dispatch({\n  type: CHANGE_DEFAULT_VALUE,\n  payload: {\n    fieldId,\n    defaultValue\n  }\n})\n\nexport const changeName = (dispatch, fieldId, name) => dispatch({\n  type: CHANGE_NAME,\n  payload: {\n    fieldId,\n    name\n  }\n})\n\nexport const changeNullable = (dispatch, fieldId) => dispatch({\n  type: CHANGE_NULLABLE,\n  payload: {\n    fieldId\n  }\n})\n\nexport const changeType = (dispatch, fieldId, type) => dispatch({\n  type: CHANGE_TYPE,\n  payload: {\n    fieldId,\n    type\n  }\n})\n\nexport const removeField = (dispatch, fieldId) => dispatch({\n  type: REMOVE_FIELD,\n  payload: {\n    fieldId\n  }\n})\n","import React from 'react';\n\nimport RecordField from './Record'\nimport { useStore } from 'store'\nimport { changeName, changeNullable, changeType, removeField } from 'store/actions'\n\nconst supportedTypes = ['boolean', 'int', 'long', 'float', 'double', 'bytes', 'string', 'record', 'enum', 'array', 'map']\n\nconst Field = (props) => {\n  const [, dispatch] = useStore()\n\n  const { name, nullable, type } = props\n\n  let TypeComponent = null\n  switch (type) {\n    case 'record': TypeComponent = RecordField; break\n    default: break\n  }\n\n  return (\n    <li>\n      {!props.parentId ? null :\n        <span className={\"remove\"} onClick={() => removeField(dispatch, props.id)}>x&nbsp;</span>\n      }\n      &#123;\n        \"name\": <input type=\"text\" value={name} onChange={(evt) => changeName(dispatch, props.id, evt.target.value)} />,\n        \"type\":\n        <select value={type} onChange={(evt) => changeType(dispatch, props.id, evt.target.value)}>\n          {supportedTypes.map(st => <option key={st} value={st}>{st}</option>)}\n        </select>\n        {!props.parentId ? null :\n          <React.Fragment>, \"nullable\": <input type=\"checkbox\" checked={nullable} onChange={(evt) => changeNullable(dispatch, props.id)} /></React.Fragment>\n        }\n        {TypeComponent ? <TypeComponent {...props} /> : null}\n      &#125;\n    </li>\n  )\n}\n\nexport default Field;\n","import React from 'react';\n\nimport Field from 'components/Field'\nimport { useStore } from 'store'\nimport { addField } from 'store/actions'\nimport { getFields } from 'store/selectors'\n\nconst FieldList = ({ parentId }) => {\n  const [store, dispatch] = useStore()\n  const fields = getFields(store, parentId)\n\n  return (\n    <ul>\n      {fields.map(field => <Field {...field} key={field.id} />)}\n      {!parentId ? null :\n        <li className={\"add\"} onClick={() => addField(dispatch, parentId)}>&#43; add</li>\n      }\n    </ul>\n  )\n}\n\nexport default FieldList\n","import React from 'react';\n\nimport DownloadLink from 'components/DownloadLink'\nimport FieldList from 'components/FieldList'\n\nimport './App.css';\n\nconst App = () => (\n  <React.Fragment>\n    <DownloadLink />\n    <FieldList />\n  </React.Fragment>\n)\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport App from 'components/App';\nimport { StoreProvider } from 'store'\n\nimport './index.css';\n\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<StoreProvider><App /></StoreProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}